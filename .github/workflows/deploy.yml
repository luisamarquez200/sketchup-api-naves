name: Deploy

on:
  pull_request:
    branches: [main]

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install SSH tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client dos2unix

      - name: Prepare SSH key
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Verificar que la variable llega
          if [ -z "$PRIVATE_KEY" ]; then
            echo "‚ùå Error: SSH_PRIVATE_KEY is empty"
            exit 1
          fi

          mkdir -p ~/.ssh
          # Escribir la clave conservando saltos de l√≠nea
          printf '%b\n' "$PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Elimina posibles CRLF
          dos2unix ~/.ssh/deploy_key

          # Convierte al formato PEM compatible
          ssh-keygen -p -f ~/.ssh/deploy_key -m PEM -N ""  

      - name: Configure known_hosts and SSH agent
        env:
          HOST_NAME: ${{ secrets.SSH_HOST }}
        run: |
          # A√±adir host a known_hosts
          ssh-keyscan -H "$HOST_NAME" >> ~/.ssh/known_hosts 2>/dev/null \
            || echo "‚ö†Ô∏è Warning: ssh-keyscan failed"

          # Desactivar StrictHostKeyChecking para este host
          echo -e "Host $HOST_NAME\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

          # Iniciar agente y a√±adir clave
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key

      - name: SSH Deploy
        env:
          HOST_NAME: ${{ secrets.SSH_HOST }}
          USER_NAME: ${{ secrets.USER_NAME }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
          GIT_REPO: ${{ secrets.GIT_REPO }}
        run: |
          # Verificar variables requeridas
          if [ -z "$HOST_NAME" ] || [ -z "$USER_NAME" ] || [ -z "$PROJECT_PATH" ] || [ -z "$GIT_REPO" ]; then
            echo "‚ùå Error: Missing required environment variables"
            exit 1
          fi

          ssh "$USER_NAME@$HOST_NAME" <<EOF
            set -e

            if [ ! -d "$PROJECT_PATH/.git" ]; then
              echo "‚öôÔ∏è Clonando repositorio..."
              mkdir -p \$(dirname "$PROJECT_PATH")
              git clone "$GIT_REPO" "$PROJECT_PATH"
            fi

            echo "üîÑ Actualizando c√≥digo..."
            cd "$PROJECT_PATH"
            git fetch --all
            git reset --hard origin/main
            git pull origin main
            echo "‚úÖ Despliegue completado"
          EOF
